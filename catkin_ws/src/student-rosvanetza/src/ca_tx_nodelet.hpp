#ifndef CA_TX_NODELET_HPP_3ON6JCAY
#define CA_TX_NODELET_HPP_3ON6JCAY

#include <boost/optional/optional.hpp>
#include <etsi_its_msgs/CAM.h>
#include <nodelet/nodelet.h>
#include <ros/publisher.h>
#include <ros/service_client.h>
#include <ros/subscriber.h>
#include <cstdint>

namespace vanetza
{

/**
 * CaTxNodelet is transmitting standard-compliant Cooperative Awareness Messages (CAMs),
 * i.e. it cares of following tasks:
 * - check triggering conditions based on vehicle's dynamics
 * - adapt rate of CAM transmissions
 * - fill ITS PDU header including station ID
 * - append low frequency container every 500 ms
 * - encode etsi_its_msgs::CAM as specified by ASN.1 UPER
 * - pass down payload to BTP layer
 *
 * CaTxNodelet does not gather vehicle data to fill the CAM data fields, however.
 * It relies on a CAM provider which is expected to publish CAMs at a high rate, at least 10 Hz.
 * CAMs generated by a CAM provider shall contain as much data as possible because optional
 * data fields are pruned by CaTxNodelet later when they are not needed.
 */
    class CaTxNodelet : public nodelet::Nodelet
    {
    public:
        CaTxNodelet();

        void onInit() override;

    private:
        void checkTriggers(etsi_its_msgs::CAMConstPtr);
        void transmitMessage(etsi_its_msgs::CAMConstPtr);
        etsi_its_msgs::CAMPtr generateMessage(etsi_its_msgs::CAMConstPtr) const;

        boost::optional<int32_t> station_id_;
        ros::Duration cam_rate_min_;
        ros::Duration cam_rate_max_;
        ros::Duration cam_rate_;
        unsigned cam_rate_counter_max_;
        unsigned cam_rate_counter_;
        ros::Time last_cam_transmission_;
        ros::Time last_low_frequency_container_;
        ros::ServiceClient client_data_request_;
        ros::Subscriber sub_cam_provider_;
        ros::Subscriber sub_id_change_;
        ros::Publisher pub_cam_transmitter_;
        etsi_its_msgs::CAM::ConstPtr cam_transmission_;
    };

} // namespace vanetza

#endif /* CA_TX_NODELET_HPP_3ON6JCAY */